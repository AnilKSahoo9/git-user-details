{"version":3,"sources":["redux/ActionCreate.ts","redux/Type.ts","Components/Form.tsx","redux/Reducers.ts","redux/Store.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["arrayCommit","getCommits","userInput","repoName","i","dispatch","a","headers","axios","get","responseCommit","data","length","totalCommit","reduce","b","type","getContributions","responseContributions","contributionData","years","console","log","Form","props","handleUserInput","event","getUser","handleSubmit","bind","this","getData","getRepos","repoLang","repos","map","repo","language","prev","cur","totalStars","stargazers_count","totalForks","forks_count","state1","labels","datasets","backgroundColor","followers","following","state2","label","state3","contributions","item","year","total","state4","Object","keys","values","className","onSubmit","placeholder","onChange","isFetching","alt","fullName","src","profileUrl","userId","bio","location","website","company","href","githubUrl","options","title","display","text","fontSize","legend","position","index","key","html_url","name","description","open_issues","React","mapDispatchToProps","preventDefault","responseData","responseRepo","repoArray","connect","state","emailId","initialState","reducer","action","target","value","login","avatar_url","email","blog","Store","createStore","applyMiddleware","thunk","App","store","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iRAsCMA,EAAqB,GACrBC,EAAa,SAACC,EAAmBC,EAAkBC,GAAtC,8CAAoD,WACrEC,GADqE,mBAAAC,EAAA,6DAG/DC,EAAU,CACd,eAAgB,cAJmD,SAMxCC,IAAMC,IAAN,uCACKP,EADL,YACkBC,EADlB,yBAE3B,CAAEI,YARiE,OAM/DG,EAN+D,OAYrEV,EAAYI,GAAKM,EAAeC,KAAKC,OAG/BC,EAAcb,EAAYc,QAAO,SAAUR,EAAGS,GAClD,OAAOT,EAAIS,IACV,GAGHV,EAAS,CACPW,KCpDkC,yBDqDlCL,KAAME,IAtB6D,2CAApD,uDA0BbI,EAAmB,SAACf,GAAD,8CAAuB,WAAOG,GAAP,iBAAAC,EAAA,sEACVE,IAAMC,IAAN,qDACYP,IAFF,OACxCgB,EADwC,OAIxCC,EAAmBD,EAAsBP,KAAKS,MACpDf,EAAS,CACPW,KC7DwC,+BD8DxCL,KAAMQ,IAERE,QAAQC,IAAIH,GATkC,2CAAvB,uD,QEjDnBI,E,kDACJ,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAMRC,gBAAkB,SAACC,GACjB,EAAKF,MAAMG,QAAQD,IALnB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKJ,gBAAkB,EAAKA,gBAAgBI,KAArB,gBAJC,E,yDAWbH,GAEXI,KAAKN,MAAMO,QAAQD,KAAKN,MAAMtB,UAAWwB,GACzCI,KAAKN,MAAMQ,SAASF,KAAKN,MAAMtB,a,+BAI/B,IACI+B,EADWH,KAAKN,MAAMU,MAAMC,KAAI,SAACC,GAAD,OAAeA,EAAKC,YAChCvB,QAAO,SAAUwB,EAAMC,GAE7C,OADAD,EAAKC,IAAQD,EAAKC,IAAQ,GAAK,EACxBD,IACN,IAECE,EAAaV,KAAKN,MAAMU,MACzBC,KAAI,SAACC,GAAD,OAAeA,EAAKK,oBACxB3B,QAAO,SAACR,EAAGS,GAAJ,OAAUT,EAAIS,IAAG,GAGvB2B,EAAaZ,KAAKN,MAAMU,MACzBC,KAAI,SAACC,GAAD,OAAeA,EAAKO,eACxB7B,QAAO,SAACR,EAAGS,GAAJ,OAAUT,EAAIS,IAAG,GAOrB6B,EAAS,CACbC,OAAQ,CAAC,YAAa,aACtBC,SAAU,CACR,CACEC,gBAAiB,CAAC,UAAW,WAC7BpC,KAAM,CAACmB,KAAKN,MAAMwB,UAAWlB,KAAKN,MAAMyB,cAKxCC,EAAS,CACbL,OAAQ,CAAC,cAAe,cAAe,eACvCC,SAAU,CACR,CACEK,MAAO,kBACPJ,gBAAiB,CAAC,UAAW,UAAW,WACxCpC,KAAM,CAACmB,KAAKN,MAAMU,MAAMtB,OAAQ4B,EAAYE,MAK5CU,EAAS,CACbP,OAAQf,KAAKN,MAAM6B,cAAclB,KAAI,SAACmB,GAAD,OAAeA,EAAKC,QACzDT,SAAU,CACR,CACEK,MAAO,kBACPJ,gBAAiB,CACf,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFpC,KAAMmB,KAAKN,MAAM6B,cAAclB,KAAI,SAACmB,GAAD,OAAeA,EAAKE,YAKvDC,EAAS,CACbZ,OAAQa,OAAOC,KAAK1B,GACpBa,SAAU,CACR,CACEC,gBAAiB,CACf,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFpC,KAAM+C,OAAOE,OAAO3B,MAK1B,OACE,uBAAK4B,UAAU,kBACb,uBAAKA,UAAU,UAAf,+BACA,uBAAKA,UAAU,UACb,wBAAMC,SAAUhC,KAAKF,cACnB,yBACEZ,KAAK,OACL+C,YAAY,kBACZC,SAAUlC,KAAKL,kBAEjB,0BAAQT,KAAK,UAAb,mBAGHc,KAAKN,MAAMyC,WACV,uBAAKJ,UAAU,oBACb,uBAAKA,UAAU,gBACb,uBACEA,UAAU,aACVK,IAAKpC,KAAKN,MAAM2C,SAChBC,IAAKtC,KAAKN,MAAM6C,aAElB,uBAAKR,UAAU,WACb,yCAAiB/B,KAAKN,MAAM8C,QAC5B,yCAAiBxC,KAAKN,MAAM2C,UAE5B,mCAAWrC,KAAKN,MAAM+C,KACtB,wCAAgBzC,KAAKN,MAAMgD,UAC3B,uCAAe1C,KAAKN,MAAMiD,SAC1B,uCAAe3C,KAAKN,MAAMkD,SAC1B,oDAA4B5C,KAAKN,MAAMX,aACvC,sCACU,qBAAG8D,KAAM7C,KAAKN,MAAMoD,WAApB,qBAId,uBAAKf,UAAU,aACb,yDACA,uBAAKA,UAAU,SACb,uBAAKA,UAAU,UACb,gBAAC,IAAD,CACElD,KAAMiC,EACNiC,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,yBACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,EACTI,SAAU,aAKlB,uBAAKtB,UAAU,UACb,gBAAC,IAAD,CACElD,KAAMuC,EACN2B,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,yCACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,EACTI,SAAU,aAKlB,uBAAKtB,UAAU,UACb,gBAAC,IAAD,CACElD,KAAMyC,EACNyB,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,gCACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,EACTI,SAAU,aAKlB,uBAAKtB,UAAU,UACb,gBAAC,IAAD,CACElD,KAAM8C,EACNoB,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,uCACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,EACTI,SAAU,eAQtB,uBAAKtB,UAAU,gBACb,yDACA,uBAAKA,UAAU,gBACZ/B,KAAKN,MAAMU,MAAMC,KAAI,SAACC,EAAWgD,GAChC,OACE,uBAAKvB,UAAU,QACb,sBAAIwB,IAAKD,GACP,qBAAGT,KAAMvC,EAAKkD,UAAWlD,EAAKmD,MAC9B,0BAAKnD,EAAKoD,aACV,oCAAYpD,EAAKO,aACjB,oCAAYP,EAAKK,kBACjB,0CAAkBL,EAAKqD,qBASrC,iC,GA9OSC,aA0QbC,EAAqB,CACzBhE,QF7QgD,SAACD,GACjD,MAAO,CACLV,KCdgC,uBDehCU,MAAOA,IE2QTK,QF/MqB,SACrB7B,EACAwB,GAFqB,8CAGiC,WAAOrB,GAAP,eAAAC,EAAA,6DACtDoB,EAAMkE,iBADgD,SAE3BpF,IAAMC,IAAN,uCACOP,IAHoB,OAEhD2F,EAFgD,OAMtDxF,EAAS,CACPW,KCnFgC,uBDoFhCL,KAAMkF,EAAalF,KACnBe,MAAOA,IAETrB,EAASY,EAAiBf,IAX4B,2CAHjC,uDEgNrB8B,SFxQsB,SAAC9B,GAAD,8CAAuB,WAAOG,GAAP,mBAAAC,EAAA,sEAClBE,IAAMC,IAAN,uCACOP,EADP,wBADkB,OAW7C,IAVM4F,EADuC,OAK7CzF,EAAS,CACPW,KCrBgC,uBDsBhCL,KAAMmF,EAAanF,OAEfoF,EAAYD,EAAanF,KAAKwB,KAAI,SAACmB,GAAD,OAAeA,EAAKiC,QAEnDnF,EAAI,EAAGA,EAAI2F,EAAUnF,OAAQR,IAEpCC,EAASJ,EAAWC,EAAW6F,EAAU3F,GAAIA,IAbF,2CAAvB,wDE2QT4F,eA3BS,SAACC,GACvB,MAAO,CACL/F,UAAW+F,EAAM/F,UACjB+D,WAAYgC,EAAMhC,WAClBK,OAAQ2B,EAAM3B,OACdD,WAAY4B,EAAM5B,WAClB6B,QAASD,EAAMC,QACf/B,SAAU8B,EAAM9B,SAChBnB,UAAWiD,EAAMjD,UACjBC,UAAWgD,EAAMhD,UACjBsB,IAAK0B,EAAM1B,IACXC,SAAUyB,EAAMzB,SAChBC,QAASwB,EAAMxB,QACfC,QAASuB,EAAMvB,QACfE,UAAWqB,EAAMrB,UACjB1C,MAAO+D,EAAM/D,MACbrB,YAAaoF,EAAMpF,YACnBwC,cAAe4C,EAAM5C,iBAUesC,EAAzBK,CAA6CzE,G,eCpQ/C4E,EAA6B,CACxCjG,UAAW,GACX+D,YAAY,EACZK,OAAQ,GACRD,WAAY,GACZ6B,QAAS,GACT/B,SAAU,GACVnB,UAAW,EACXC,UAAW,EACXsB,IAAK,GACLC,SAAU,GACVC,QAAS,GACTC,QAAS,GACTE,UAAW,GACX1C,MAAO,GACPrB,YAAa,EACbwC,cAAe,IAiDF+C,EA9CC,WAA6D,IAA5DH,EAA2D,uDAAnDE,EAAcE,EAAqC,uCAC1E,OAAQA,EAAOrF,MACb,IF/CgC,uBEiD9B,OAAO,eACFiF,EADL,CAEE/F,UAAYmG,EAAO3E,MAAM4E,OAA4BC,QAEzD,IFnDgC,uBEqD9B,OAAO,eACFN,EADL,CAEE3B,OAAQ+B,EAAO1F,KAAK6F,MACpBnC,WAAYgC,EAAO1F,KAAK8F,WACxBP,QAASG,EAAO1F,KAAK+F,MACrBvC,SAAUkC,EAAO1F,KAAK4E,KACtBvC,UAAWqD,EAAO1F,KAAKqC,UACvBC,UAAWoD,EAAO1F,KAAKsC,UACvBsB,IAAK8B,EAAO1F,KAAK4D,IACjBC,SAAU6B,EAAO1F,KAAK6D,SACtBC,QAAS4B,EAAO1F,KAAKgG,KACrBjC,QAAS2B,EAAO1F,KAAK+D,QACrBE,UAAWyB,EAAO1F,KAAK2E,SACvBrB,YAAY,IAEhB,IFlEgC,uBEoE9B,OAAO,eACFgC,EADL,CAEE/D,MAAOmE,EAAO1F,OAElB,IFtEkC,yBEuEhC,OAAO,eACFsF,EADL,CAEEpF,YAAawF,EAAO1F,OAExB,IFzEwC,+BE0EtC,OAAO,eACFsF,EADL,CAEE5C,cAAegD,EAAO1F,OAE1B,QACE,OAAOsF,I,QC7EEW,EALDC,YACZT,EACAU,YAAgBC,MCMHC,MAVf,WACE,OACE,gBAAC,IAAD,CAAUC,MAAOL,GACf,2BACE,gBAAC,EAAD,SCGYM,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7G,QAAQ6G,MAAMA,EAAMC,a","file":"static/js/main.948343db.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  actionType,\r\n  REQUEST_USER_DETAILS,\r\n  RECEIVE_USER_DETAILS,\r\n  RECEIVE_REPO_DETAILS,\r\n  RECEIVE_COMMIT_DETAILS,\r\n  RECEIVE_CONTRIBUTION_DETAILS,\r\n} from \"./Type\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { Action } from \"redux\";\r\nimport { ActionCreator } from \"redux\";\r\nimport { appState } from \"./Store\";\r\n\r\nexport const getUser: ActionCreator<actionType> = (event) => {\r\n  return {\r\n    type: REQUEST_USER_DETAILS,\r\n    event: event,\r\n  };\r\n};\r\n\r\nexport const getRepos = (userInput: string) => async (dispatch: any) => {\r\n  const responseRepo = await axios.get(\r\n    `https://api.github.com/users/${userInput}/repos?sort=updated`\r\n  );\r\n  //console.log(responseRepo.data);\r\n  dispatch({\r\n    type: RECEIVE_REPO_DETAILS,\r\n    data: responseRepo.data,\r\n  });\r\n  const repoArray = responseRepo.data.map((item: any) => item.name);\r\n  //console.log(repoArray);\r\n  for (let i = 0; i < repoArray.length; i++) {\r\n    //console.log(repoArray[i]);\r\n    dispatch(getCommits(userInput, repoArray[i], i));\r\n  }\r\n};\r\n\r\nconst arrayCommit: any[] = [];\r\nconst getCommits = (userInput: string, repoName: string, i: number) => async (\r\n  dispatch: any\r\n) => {\r\n  const headers = {\r\n    \"Content-Type\": \"text/plain\",\r\n  };\r\n  const responseCommit = await axios.get(\r\n    `https://api.github.com/repos/${userInput}/${repoName}/commits?sort=updated`,\r\n    { headers }\r\n  );\r\n  //console.log(responseCommit.data);\r\n  //console.log(i);\r\n  arrayCommit[i] = responseCommit.data.length;\r\n  //console.log(array1.length);\r\n  //console.log(array1);\r\n  const totalCommit = arrayCommit.reduce(function (a, b) {\r\n    return a + b;\r\n  }, 0);\r\n  //console.log(totalCommit);\r\n\r\n  dispatch({\r\n    type: RECEIVE_COMMIT_DETAILS,\r\n    data: totalCommit,\r\n  });\r\n};\r\n\r\nconst getContributions = (userInput: string) => async (dispatch: any) => {\r\n  const responseContributions = await axios.get(\r\n    `https://github-contributions-api.now.sh/v1/${userInput}`\r\n  );\r\n  const contributionData = responseContributions.data.years;\r\n  dispatch({\r\n    type: RECEIVE_CONTRIBUTION_DETAILS,\r\n    data: contributionData,\r\n  });\r\n  console.log(contributionData);\r\n};\r\n\r\nexport const getData = (\r\n  userInput: string,\r\n  event: any\r\n): ThunkAction<void, appState, null, Action<string>> => async (dispatch) => {\r\n  event.preventDefault();\r\n  const responseData = await axios.get(\r\n    `https://api.github.com/users/${userInput}`\r\n  );\r\n  //console.log(\"action data fetched\");\r\n  dispatch({\r\n    type: RECEIVE_USER_DETAILS,\r\n    data: responseData.data,\r\n    event: event,\r\n  });\r\n  dispatch(getContributions(userInput));\r\n};\r\n","import { SyntheticEvent } from \"react\";\r\n\r\nexport const REQUEST_USER_DETAILS = \"REQUEST_USER_DETAILS\";\r\n\r\nexport const RECEIVE_USER_DETAILS = \"RECEIVE_USER_DETAILS\";\r\n\r\nexport const RECEIVE_REPO_DETAILS = \"RECEIVE_REPO_DETAILS\";\r\n\r\nexport const RECEIVE_COMMIT_DETAILS = \"RECEIVE_COMMIT_DETAILS\";\r\n\r\nexport const RECEIVE_CONTRIBUTION_DETAILS = \"RECEIVE_CONTRIBUTION_DETAILS\";\r\n\r\ninterface RequestUserDetails {\r\n  type: typeof REQUEST_USER_DETAILS;\r\n  event: SyntheticEvent;\r\n}\r\n\r\ninterface ReceiveUserDetails {\r\n  type: typeof RECEIVE_USER_DETAILS;\r\n  data: any;\r\n  event: SyntheticEvent;\r\n}\r\n\r\ninterface ReceiveRepoDetails {\r\n  type: typeof RECEIVE_REPO_DETAILS;\r\n  data: any;\r\n}\r\n\r\ninterface ReceiveCommitDetails {\r\n  type: typeof RECEIVE_COMMIT_DETAILS;\r\n  data: any;\r\n}\r\n\r\ninterface ReceiveContributionDetails {\r\n  type: typeof RECEIVE_CONTRIBUTION_DETAILS;\r\n  data: any;\r\n}\r\nexport type actionType =\r\n  | RequestUserDetails\r\n  | ReceiveUserDetails\r\n  | ReceiveRepoDetails\r\n  | ReceiveCommitDetails\r\n  | ReceiveContributionDetails;\r\n","import * as React from \"react\";\r\nimport \"./Form.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as action from \"../redux/ActionCreate\";\r\nimport { InitialState } from \"../redux/Reducers\";\r\nimport { appState } from \"../redux/Store\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n//import UserDetails from \"./UserDetails\";\r\ninterface dispatchProps {\r\n  getUser: (event: any) => any;\r\n  getData: (userInput: string, event: any) => any;\r\n  getRepos: (userInput: string) => any;\r\n}\r\n\r\ntype Props = InitialState & dispatchProps;\r\n\r\nclass Form extends React.Component<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleUserInput = this.handleUserInput.bind(this);\r\n  }\r\n\r\n  handleUserInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.getUser(event);\r\n  };\r\n\r\n  handleSubmit(event: any) {\r\n    //console.log(\"button clicked\");\r\n    this.props.getData(this.props.userInput, event);\r\n    this.props.getRepos(this.props.userInput);\r\n  }\r\n\r\n  render() {\r\n    let repoData = this.props.repos.map((repo: any) => repo.language); // for extracting languages from each repository\r\n    let repoLang = repoData.reduce(function (prev, cur) {\r\n      prev[cur] = (prev[cur] || 0) + 1;\r\n      return prev;\r\n    }, {});\r\n\r\n    let totalStars = this.props.repos\r\n      .map((repo: any) => repo.stargazers_count)\r\n      .reduce((a, b) => a + b, 0);\r\n    //console.log(totalStars);\r\n\r\n    let totalForks = this.props.repos\r\n      .map((repo: any) => repo.forks_count)\r\n      .reduce((a, b) => a + b, 0);\r\n    //console.log(totalForks);\r\n\r\n    //console.log(map);\r\n    //console.log(Object.keys(map));\r\n    //console.log(Object.values(map));\r\n\r\n    const state1 = {\r\n      labels: [\"Followers\", \"Following\"],\r\n      datasets: [\r\n        {\r\n          backgroundColor: [\"#0074D9\", \"#FF4136\"],\r\n          data: [this.props.followers, this.props.following],\r\n        },\r\n      ],\r\n    };\r\n\r\n    const state2 = {\r\n      labels: [\"Total Repos\", \"Total Stars\", \"Total Forks\"],\r\n      datasets: [\r\n        {\r\n          label: \"Data Visualized\",\r\n          backgroundColor: [\"#0074D9\", \"#FF4136\", \"#2ECC40\"],\r\n          data: [this.props.repos.length, totalStars, totalForks],\r\n        },\r\n      ],\r\n    };\r\n\r\n    const state3 = {\r\n      labels: this.props.contributions.map((item: any) => item.year),\r\n      datasets: [\r\n        {\r\n          label: \"Data Visualized\",\r\n          backgroundColor: [\r\n            \"#0074D9\",\r\n            \"#FF4136\",\r\n            \"#2ECC40\",\r\n            \"#FF851B\",\r\n            \"#7FDBFF\",\r\n            \"#B10DC9\",\r\n            \"#FFDC00\",\r\n            \"#001f3f\",\r\n            \"#39CCCC\",\r\n            \"#01FF70\",\r\n            \"#85144b\",\r\n            \"#F012BE\",\r\n            \"#3D9970\",\r\n            \"#111111\",\r\n            \"#AAAAAA\",\r\n          ],\r\n          data: this.props.contributions.map((item: any) => item.total),\r\n        },\r\n      ],\r\n    };\r\n\r\n    const state4 = {\r\n      labels: Object.keys(repoLang),\r\n      datasets: [\r\n        {\r\n          backgroundColor: [\r\n            \"#0074D9\",\r\n            \"#FF4136\",\r\n            \"#2ECC40\",\r\n            \"#FF851B\",\r\n            \"#7FDBFF\",\r\n            \"#B10DC9\",\r\n            \"#FFDC00\",\r\n            \"#001f3f\",\r\n            \"#39CCCC\",\r\n            \"#01FF70\",\r\n            \"#85144b\",\r\n            \"#F012BE\",\r\n            \"#3D9970\",\r\n            \"#111111\",\r\n            \"#AAAAAA\",\r\n          ],\r\n          data: Object.values(repoLang),\r\n        },\r\n      ],\r\n    };\r\n\r\n    return (\r\n      <div className=\"main-container\">\r\n        <div className=\"navbar\">~ : Github User Details : ~</div>\r\n        <div className=\"search\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter User Name\"\r\n              onChange={this.handleUserInput}\r\n            />\r\n            <button type=\"submit\">Fetch Details</button>\r\n          </form>\r\n        </div>\r\n        {this.props.isFetching ? (\r\n          <div className=\"result-container\">\r\n            <div className=\"user-details\">\r\n              <img\r\n                className=\"user-photo\"\r\n                alt={this.props.fullName}\r\n                src={this.props.profileUrl}\r\n              />\r\n              <div className=\"details\">\r\n                <div>User Name: {this.props.userId}</div>\r\n                <div>Full Name: {this.props.fullName}</div>\r\n                {/* <div>Email Id: {this.props.emailId}</div> */}\r\n                <div>Bio: {this.props.bio}</div>\r\n                <div>Location: {this.props.location}</div>\r\n                <div>Website: {this.props.website}</div>\r\n                <div>Company: {this.props.company}</div>\r\n                <div>Total no. of commits: {this.props.totalCommit}</div>\r\n                <div>\r\n                  Link to <a href={this.props.githubUrl}>GitHub Profile</a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"all-chart\">\r\n              <div>~ : Data Visualization : ~</div>\r\n              <div className=\"chart\">\r\n                <div className=\"chart1\">\r\n                  <Doughnut\r\n                    data={state1}\r\n                    options={{\r\n                      title: {\r\n                        display: true,\r\n                        text: \"Followers vs Following\",\r\n                        fontSize: 20,\r\n                      },\r\n                      legend: {\r\n                        display: true,\r\n                        position: \"right\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"chart2\">\r\n                  <Doughnut\r\n                    data={state2}\r\n                    options={{\r\n                      title: {\r\n                        display: true,\r\n                        text: \"Total Repo ~ Total Stars ~ Total Forks\",\r\n                        fontSize: 20,\r\n                      },\r\n                      legend: {\r\n                        display: true,\r\n                        position: \"right\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"chart3\">\r\n                  <Doughnut\r\n                    data={state3}\r\n                    options={{\r\n                      title: {\r\n                        display: true,\r\n                        text: \"No. of Contributions per year\",\r\n                        fontSize: 20,\r\n                      },\r\n                      legend: {\r\n                        display: true,\r\n                        position: \"right\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"chart4\">\r\n                  <Doughnut\r\n                    data={state4}\r\n                    options={{\r\n                      title: {\r\n                        display: true,\r\n                        text: \"No. of Languages used per repository\",\r\n                        fontSize: 20,\r\n                      },\r\n                      legend: {\r\n                        display: true,\r\n                        position: \"right\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"repo-content\">\r\n              <div>~ : Repository Details : ~</div>\r\n              <div className=\"repo-details\">\r\n                {this.props.repos.map((repo: any, index: any) => {\r\n                  return (\r\n                    <div className=\"repo\">\r\n                      <li key={index}>\r\n                        <a href={repo.html_url}>{repo.name}</a>\r\n                        <h3>{repo.description}</h3>\r\n                        <h3>Forks: {repo.forks_count}</h3>\r\n                        <h3>Stars: {repo.stargazers_count}</h3>\r\n                        <h3>Open Issues: {repo.open_issues}</h3>\r\n                      </li>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: appState) => {\r\n  return {\r\n    userInput: state.userInput,\r\n    isFetching: state.isFetching,\r\n    userId: state.userId,\r\n    profileUrl: state.profileUrl,\r\n    emailId: state.emailId,\r\n    fullName: state.fullName,\r\n    followers: state.followers,\r\n    following: state.following,\r\n    bio: state.bio,\r\n    location: state.location,\r\n    website: state.website,\r\n    company: state.company,\r\n    githubUrl: state.githubUrl,\r\n    repos: state.repos,\r\n    totalCommit: state.totalCommit,\r\n    contributions: state.contributions,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getUser: action.getUser,\r\n  getData: action.getData,\r\n  getRepos: action.getRepos,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import {\r\n  actionType,\r\n  REQUEST_USER_DETAILS,\r\n  RECEIVE_USER_DETAILS,\r\n  RECEIVE_REPO_DETAILS,\r\n  RECEIVE_COMMIT_DETAILS,\r\n  RECEIVE_CONTRIBUTION_DETAILS,\r\n} from \"./Type\";\r\n\r\nexport interface InitialState {\r\n  userInput: string;\r\n  isFetching: boolean;\r\n  userId: string;\r\n  profileUrl: string;\r\n  emailId: string;\r\n  fullName: string;\r\n  followers: number;\r\n  following: number;\r\n  bio: string;\r\n  location: string;\r\n  website: string;\r\n  company: string;\r\n  githubUrl: string;\r\n  repos: [];\r\n  totalCommit: number;\r\n  contributions: [];\r\n}\r\n\r\nexport const initialState: InitialState = {\r\n  userInput: \"\",\r\n  isFetching: false,\r\n  userId: \"\",\r\n  profileUrl: \"\",\r\n  emailId: \"\",\r\n  fullName: \"\",\r\n  followers: 0,\r\n  following: 0,\r\n  bio: \"\",\r\n  location: \"\",\r\n  website: \"\",\r\n  company: \"\",\r\n  githubUrl: \"\",\r\n  repos: [],\r\n  totalCommit: 0,\r\n  contributions: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action: actionType): InitialState => {\r\n  switch (action.type) {\r\n    case REQUEST_USER_DETAILS:\r\n      //console.log((action.event.target as HTMLInputElement).value);\r\n      return {\r\n        ...state,\r\n        userInput: (action.event.target as HTMLInputElement).value,\r\n      };\r\n    case RECEIVE_USER_DETAILS:\r\n      //console.log(\"Reducer Data fetched\");\r\n      return {\r\n        ...state,\r\n        userId: action.data.login,\r\n        profileUrl: action.data.avatar_url,\r\n        emailId: action.data.email,\r\n        fullName: action.data.name,\r\n        followers: action.data.followers,\r\n        following: action.data.following,\r\n        bio: action.data.bio,\r\n        location: action.data.location,\r\n        website: action.data.blog,\r\n        company: action.data.company,\r\n        githubUrl: action.data.html_url,\r\n        isFetching: true,\r\n      };\r\n    case RECEIVE_REPO_DETAILS:\r\n      //console.log(action.data);\r\n      return {\r\n        ...state,\r\n        repos: action.data,\r\n      };\r\n    case RECEIVE_COMMIT_DETAILS:\r\n      return {\r\n        ...state,\r\n        totalCommit: action.data,\r\n      };\r\n    case RECEIVE_CONTRIBUTION_DETAILS:\r\n      return {\r\n        ...state,\r\n        contributions: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"./Reducers\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { actionType } from \"./Type\";\r\n\r\nexport type appState = ReturnType<typeof reducer>;\r\n\r\nconst Store = createStore(\r\n  reducer,\r\n  applyMiddleware(thunk as ThunkMiddleware<appState, actionType>)\r\n);\r\n\r\nexport default Store;\r\n","import * as React from \"react\";\nimport Form from \"./Components/Form\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./redux/Store\";\n\nfunction App() {\n  return (\n    <Provider store={Store}>\n      <div>\n        <Form />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}